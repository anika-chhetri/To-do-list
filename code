#To-do list
import json
import os
from datetime import datetime
from tabulate import tabulate

class Task:
    def __init__(self, id, title, priority="Medium", status="Pending", created_at=None):
        self.id = id
        self.title = title
        self.priority = priority
        self.status = status
        self.created_at = created_at or datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "priority": self.priority,
            "status": self.status,
            "created_at": self.created_at
        }

class ToDoList:
    def __init__(self, filename="todo.json"):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self):
        if not os.path.exists(self.filename):
            return []
        with open(self.filename, "r") as file:
            return [Task(**task) for task in json.load(file)]

    def save_tasks(self):
        with open(self.filename, "w") as file:
            json.dump([task.to_dict() for task in self.tasks], file, indent=4)

    def create_task(self, title, priority="Medium"):
        task_id = 1 if not self.tasks else self.tasks[-1].id + 1
        new_task = Task(task_id, title, priority)
        self.tasks.append(new_task)
        self.save_tasks()
        print("✅ Task added!")

    def list_tasks(self):
        if not self.tasks:
            print("No tasks found.")
            return
        table = [
            [task.id, task.title, task.priority, task.status, task.created_at]
            for task in self.tasks
        ]
        print(tabulate(table, headers=["ID", "Title", "Priority", "Status", "Created At"], tablefmt="fancy_grid"))

    def update_task(self, task_id, title=None, priority=None, status=None):
        for task in self.tasks:
            if task.id == task_id:
                if title: task.title = title
                if priority: task.priority = priority
                if status: task.status = status
                self.save_tasks()
                print("✏️ Task updated!")
                return
        print("❌ Task not found.")

    def delete_task(self, task_id):
        initial_len = len(self.tasks)
        self.tasks = [task for task in self.tasks if task.id != task_id]
        if len(self.tasks) < initial_len:
            self.save_tasks()
            print("🗑️ Task deleted!")
        else:
            print("❌ Task not found.")

    def search_tasks(self, keyword):
        found = [task for task in self.tasks if keyword.lower() in task.title.lower()]
        if not found:
            print("🔍 No matching tasks found.")
            return
        table = [
            [task.id, task.title, task.priority, task.status, task.created_at]
            for task in found
        ]
        print(tabulate(table, headers=["ID", "Title", "Priority", "Status", "Created At"], tablefmt="fancy_grid"))

# ----------------------------
# Menu
# ----------------------------
def menu():
    todo = ToDoList()
    while True:
        print("\n🔹 TO-DO LIST MENU 🔹")
        print("1. Create Task")
        print("2. List Tasks")
        print("3. Update Task")
        print("4. Delete Task")
        print("5. Search Tasks")
        print("6. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            title = input("Enter task title: ")
            priority = input("Enter priority (Low/Medium/High): ").capitalize()
            todo.create_task(title, priority)
        elif choice == "2":
            todo.list_tasks()
        elif choice == "3":
            task_id = int(input("Enter task ID to update: "))
            title = input("New title (leave blank to skip): ")
            priority = input("New priority (Low/Medium/High or leave blank): ").capitalize()
            status = input("New status (Pending/Done or leave blank): ").capitalize()
            todo.update_task(task_id, title or None, priority or None, status or None)
        elif choice == "4":
            task_id = int(input("Enter task ID to delete: "))
            todo.delete_task(task_id)
        elif choice == "5":
            keyword = input("Enter keyword to search: ")
            todo.search_tasks(keyword)
        elif choice == "6":
            print("👋 Goodbye!")
            break
        else:
            print("❌ Invalid choice. Try again.")

if __name__ == "__main__":
    menu()
